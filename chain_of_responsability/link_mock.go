// Code generated by MockGen. DO NOT EDIT.
// Source: link.go

// Package chainofresponsability is a generated GoMock package.
package chainofresponsability

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLink is a mock of Link interface.
type MockLink struct {
	ctrl     *gomock.Controller
	recorder *MockLinkMockRecorder
}

// MockLinkMockRecorder is the mock recorder for MockLink.
type MockLinkMockRecorder struct {
	mock *MockLink
}

// NewMockLink creates a new mock instance.
func NewMockLink(ctrl *gomock.Controller) *MockLink {
	mock := &MockLink{ctrl: ctrl}
	mock.recorder = &MockLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLink) EXPECT() *MockLinkMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockLink) Handle() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle")
}

// Handle indicates an expected call of Handle.
func (mr *MockLinkMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockLink)(nil).Handle))
}

// SetNext mocks base method.
func (m *MockLink) SetNext(next Link) Link {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNext", next)
	ret0, _ := ret[0].(Link)
	return ret0
}

// SetNext indicates an expected call of SetNext.
func (mr *MockLinkMockRecorder) SetNext(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockLink)(nil).SetNext), next)
}
